# -*- mode: Python; -*-

## @file calc/SConscript
#  @brief scons build for calc C++ library

import os, platform, shutil

Import('env')

Import('MYAPP_VER_MAJOR')
Import('MYAPP_VER_MINOR')
Import('MYAPP_VER_COMPILATION')

def copyLibBuilder( target, source, env):
   '''kopiuje biblioteke'''
   shutil.copy( str(source[0]), str(target[0]) )
   return

#sciezki
env.Append( ENV = {'PATH' : os.environ['PATH'] })

if(platform.system() == "Linux"):
   env.Append( CPPPATH = ['/usr/include/python3.5'] )
   env.Append( LIBPATH = [Dir('/usr/lib/python3.5'),
                          Dir('.') ] )

   env.Append( CPPFLAGS = '-Wall -pedantic -pthread --std=c++11 ' )
   env.Append( LINKFLAGS = '-Wall -pthread --std=c++11  ' )

   env.Append( LIBS = [ 'boost_python3', 'boost_thread',  'boost_chrono',  'boost_system' ] )
elif(platform.system() == "Windows"):
   env.Append( CPPPATH = [ Dir('C:/Boost/include/boost-1_63'), #path to boost include
                           Dir('C:/Python27/include'), #path to python include
                           Dir('C:/usr/local/include') ] ) #path to mt4cpp include
   env.Append( LIBPATH = [ Dir('C:/Boost/lib'), #path to boost libs
                           Dir('C:/Python27/libs'),
                           Dir('.') ] ) #path to python libs

   env.Append( CPPFLAGS = ' /EHsc /MD /D "WIN32" /D "_CONSOLE" /W4  ' )
   env.Append( LINKFLAGS = ' /SUBSYSTEM:CONSOLE ' )
else:
   print platform.system() + " not supported"

#add export flag to DLL build environment
env_dll = env.Clone()
if(platform.system() == "Linux"):
   pass
elif(platform.system() == "Windows"):
   env_dll.Append( CPPFLAGS = ' /D "GAME_STATE_EXPORTS" ')

#build C++ library
cpplib = env_dll.SharedLibrary( target = 'game', source = [
    '../game/src/gameState/gameStatePy.cpp',
    '../game/src/pawn.cpp',
    '../game/src/board.cpp',
    '../game/src/field.cpp',
    '../game/src/game.cpp',
    '../game/src/player.cpp',
])
if(platform.system() == "Linux"):
   target = '../build_web/game/game.so'
elif(platform.system() == "Windows"):
   target = '../build_web/gamepy/game.pyd'
env_dll.Command(target, cpplib, copyLibBuilder )


#build tests
env_test = env.Clone()

if(platform.system() == "Linux"):
   env_test.Append( LIBS = [ 'python3.5m', 'boost_unit_test_framework' ] )
   env_test.Prepend( LIBS = 'game' )
elif(platform.system() == "Windows"):
   env_test.Prepend( LIBS = 'game' )

test_src = [
	'tests/game_test.cpp',
	'tests/player_test.cpp',
]
env_test.Program(target="game_logic_test", source=test_src)
